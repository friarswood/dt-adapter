
#include <iostream>

#ifdef HAVE_CO2_5000
#include <wiringPi.h>
#include <wiringSerial.h>  //only needed for serialOpen
#include <unistd.h> // needed for read and write
//#include <termios.h>
#endif

#include <tuple>
#include <array>

#include <chrono>
#include <ctime>

// This is NOT for the winsen MH-Z19C CO2 sensor. It is for the "CO2-5000 carbon dioxide sensor" which I got on eBay, advertised as a MH-Z19C.
// The seller (https://www.ebay.co.uk/itm/224540799740?hash=item3447acb2fc:g:EawAAOSwZt1gQvWr) provided a Chinese datasheet, which is included.

#include "driver.h"

using namespace std::string_literals;

namespace {

const char* utcStr(const std::chrono::system_clock::time_point t)
{
  time_t tt = std::chrono::system_clock::to_time_t(t);
  struct tm* ttt;
  ttt = gmtime(&tt);
  static char buffer[32];
  strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%SZ", ttt);
  return buffer;
}

#ifdef HAVE_CO2_5000

std::tuple<uint8_t, uint8_t> calc_crc(uint8_t *data, uint16_t len)
{
  uint8_t crc_hi = 0xFF ; /* CRC high byte initialization*/
  uint8_t crc_lo = 0xFF ; /* CRC low byte initialization*/
  const uint8_t crc_hi_lookup[] = {
    0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 ,
    0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 ,
    0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 ,
    0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 ,
    0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 ,
    0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 ,
    0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 ,
    0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 ,
    0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 ,
    0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 ,
    0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 ,
    0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 ,
    0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 ,
    0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 ,
    0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 ,
    0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 ,
    0x00 , 0xC1 , 0x81 , 0x40 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x01 , 0xC0 , 0x80 , 0x41 , 0x00 , 0xC1 , 0x81 ,
    0x40
  };

  const uint8_t crc_lo_lookup[] = {
    0x00 , 0xC0 , 0xC1 , 0x01 , 0xC3 , 0x03 , 0x02 , 0xC2 , 0xC6 , 0x06 , 0x07 , 0xC7 , 0x05 , 0xC5 , 0xC4 ,
    0x04 , 0xCC , 0x0C , 0x0D , 0xCD , 0x0F , 0xCF , 0xCE , 0x0E , 0x0A , 0xCA , 0xCB , 0x0B , 0xC9 , 0x09 ,
    0x08 , 0xC8 , 0xD8 , 0x18 , 0x19 , 0xD9 , 0x1B , 0xDB , 0xDA , 0x1A , 0x1E , 0xDE , 0xDF , 0x1F , 0xDD ,
    0x1D , 0x1C , 0xDC , 0x14 , 0xD4 , 0xD5 , 0x15 , 0xD7 , 0x17 , 0x16 , 0xD6 , 0xD2 , 0x12 , 0x13 , 0xD3 ,
    0x11 , 0xD1 , 0xD0 , 0x10 , 0xF0 , 0x30 , 0x31 , 0xF1 , 0x33 , 0xF3 , 0xF2 , 0x32 , 0x36 , 0xF6 , 0xF7 ,
    0x37 , 0xF5 , 0x35 , 0x34 , 0xF4 , 0x3C , 0xFC , 0xFD , 0x3D , 0xFF , 0x3F , 0x3E , 0xFE , 0xFA , 0x3A ,
    0x3B , 0xFB , 0x39 , 0xF9 , 0xF8 , 0x38 , 0x28 , 0xE8 , 0xE9 , 0x29 , 0xEB , 0x2B , 0x2A , 0xEA , 0xEE ,
    0x2E , 0x2F , 0xEF , 0x2D , 0xED , 0xEC , 0x2C , 0xE4 , 0x24 , 0x25 , 0xE5 , 0x27 , 0xE7 , 0xE6 , 0x26 ,
    0x22 , 0xE2 , 0xE3 , 0x23 , 0xE1 , 0x21 , 0x20 , 0xE0 , 0xA0 , 0x60 , 0x61 , 0xA1 , 0x63 , 0xA3 , 0xA2 ,
    0x62 , 0x66 , 0xA6 , 0xA7 , 0x67 , 0xA5 , 0x65 , 0x64 , 0xA4 , 0x6C , 0xAC , 0xAD , 0x6D , 0xAF , 0x6F ,
    0x6E , 0xAE , 0xAA , 0x6A , 0x6B , 0xAB , 0x69 , 0xA9 , 0xA8 , 0x68 , 0x78 , 0xB8 , 0xB9 , 0x79 , 0xBB ,
    0x7B , 0x7A , 0xBA , 0xBE , 0x7E , 0x7F , 0xBF , 0x7D , 0xBD , 0xBC , 0x7C , 0xB4 , 0x74 , 0x75 , 0xB5 ,
    0x77 , 0xB7 , 0xB6 , 0x76 , 0x72 , 0xB2 , 0xB3 , 0x73 , 0xB1 , 0x71 , 0x70 , 0xB0 , 0x50 , 0x90 , 0x91 ,
    0x51 , 0x93 , 0x53 , 0x52 , 0x92 , 0x96 , 0x56 , 0x57 , 0x97 , 0x55 , 0x95 , 0x94 , 0x54 , 0x9C , 0x5C ,
    0x5D , 0x9D , 0x5F , 0x9F , 0x9E , 0x5E , 0x5A , 0x9A , 0x9B , 0x5B , 0x99 , 0x59 , 0x58 , 0x98 , 0x88 ,
    0x48 , 0x49 , 0x89 , 0x4B , 0x8B , 0x8A , 0x4A , 0x4E , 0x8E , 0x8F , 0x4F , 0x8D , 0x4D , 0x4C , 0x8C ,
    0x44 , 0x84 , 0x85 , 0x45 , 0x87 , 0x47 , 0x46 , 0x86 , 0x82 , 0x42 , 0x43 , 0x83 , 0x41 , 0x81 , 0x80 ,
    0x40
  };

  uint16_t i;
  while (len--)
  {
    i = crc_lo ^ *data++;
    crc_lo = crc_hi ^ crc_hi_lookup[i];
    crc_hi = crc_lo_lookup[i];
  }

  return {crc_lo, crc_hi};
}

// last 2 bytes are checksum
bool check_crc(uint8_t *data, uint16_t len)
{
  auto [lo, hi] = calc_crc(data, len - 2);
  return lo == data[len-2] && hi == data[len-1];
}

// TODO check endianness...
float as_float(const uint8_t* p)
{
  return *reinterpret_cast<const float*>(p);
}

float as_uint32_t(const uint8_t* p)
{
  return *reinterpret_cast<const uint32_t*>(p);
}

#endif

}


const std::array<uint8_t, 5> REQUEST_CO2{0x64, 0x69, 0x01, 0xDF, 0x8F};
const std::array<uint8_t, 5> REQUEST_TEMP{0x64, 0x69, 0x01, 0xDF, 0x8F};
// const std::array<uint8_t, MH_Z19C::MSG_LEN> START_CALIBRATION{0xFF,0x01,0x79,0xa0,0x00,0x00,0x00,0x00,0xe6};
// const std::array<uint8_t, MH_Z19C::MSG_LEN> STOP_CALIBRATION{0xFF,0x01,0x79,0x00,0x00,0x00,0x00,0x00,0x86};


CO2_5000::CO2_5000()
  : m_response_buffer{0}
{
#ifdef HAVE_CO2_5000
  // port is hard-coded...
  m_id = "00000000d3c38f28"; // TODO...
  m_fd = serialOpen("/dev/serial0", 9600);
#else
  m_id = "testing123";
  m_fd = 0;
#endif
  if (m_fd < 0)
  {
    throw std::runtime_error("Unable to open device");
  }
}


py::str CO2_5000::id() const
{
  return m_id;
}

py::str CO2_5000::type() const
{
#ifdef HAVE_CO2_5000
  return "CO2-5000";
#else
  return "CO2-5000-STUB";
#endif
}


py::str CO2_5000::status() const
{
  // TODO
  return "OK";
}

py::dict CO2_5000::reading()
{
  py::dict result;
  result["status"] = status();
  result["timestamp"] = utcStr(std::chrono::system_clock::now());

#ifdef HAVE_CO2_5000
  size_t n = write(m_fd, REQUEST_CO2.data(), REQUEST_CO2.size());
  if (n != REQUEST_CO2.size())
  {
    throw std::runtime_error("invalid number of bytes written: "s + std::to_string(n));
  }

  delay(100); // give device time to respond

  // e.g. 64 69 01 01 D5 9E 02 44 00 00 00 00 DA C2
  //       0  1  2  3  4           8          12
  std::array<uint8_t, 14> response;

  n = read(m_fd, response.data(), response.size());
  if (n != response.size())
  {
    throw std::runtime_error("invalid number of bytes read: "s + std::to_string(n));
  }

  if (!check_crc(response.data(),response.size()))
  {
    throw std::runtime_error("device response CRC invalid");
  }

  uint32_t error = as_uint32_t(response.data() + 8);
  if (error)
  {
    throw std::runtime_error("device response data invalid, code "s + std::to_string(error));
  }

  result["co2"] = as_float(response.data() + 4);

#else
  // ramp up from 400 to 655 then back to 400
  static uint8_t counter = 0;
  m_response_buffer[2] = uint8_t((400 + counter) >> 8);
  m_response_buffer[3] = uint8_t((400 + counter) & 0xff);
  ++counter;
  result["co2"] = m_response_buffer[2] * 256 +  m_response_buffer[3];
#endif

  return result;
}
